name: Diff Sentry

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  analyze-diff:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get the diff
      uses: GrantBirki/git-diff-action@v2.8.0
      id: diff-capture
      with:
        json_diff_file_output: 'diff.json'

    - name: Send POST request to DiffSentry and comment on PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          const fsSync = require('fs');
          
          try {
            const diffContent = fsSync.readFileSync('diff.json', 'utf8');
            
            // Prepare the request data
            const requestData = {
              metadata: {
                repo: context.repo.owner + '/' + context.repo.repo,
                commit: context.sha
              },
              diff: JSON.parse(diffContent)
            };
            
            // Send request to DiffSentry backend
            const response = await fetch('https://diff-sentry-backend-c77f0d5e98bc.herokuapp.com/diffsentry', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(requestData)
            });
            
            // Parse the response (this is async!)
            const responseData = await response.json();
            console.log('DiffSentry response:', JSON.stringify(responseData, null, 2));
            
            // Save response to file for debugging
            await fs.writeFile('response.json', JSON.stringify(responseData, null, 2));
            
            // Only comment on pull requests
            if (context.eventName === 'pull_request') {
              const status = responseData.status;
              const analysis = responseData.analysis || 'No analysis provided';
              
              // Create status emoji and text
              const statusEmoji = status === 'failing' ? '❌' : '✅';
              const statusText = status === 'failing' ? 'FAILING' : 'PASSING';
              
              // Create comment body
              const body = `\#\# DiffSentry Security Scan Results\n\n**Status**: ${statusEmoji} ${statusText}\n\n\#\#\# Vulnerability Analysis\n\n${analysis}\n\n${status === 'failing' ? '❌ **Warning**: Potential security vulnerabilities detected!' : '✅ No critical security issues found.'}`;
              
              // Find existing comments by this action
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const botComment = comments.data.find(comment => 
                comment.user.login === 'github-actions[bot]' && 
                comment.body.includes('DiffSentry Security Scan Results')
              );
              
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: body
                });
                console.log(`Updated comment \#${botComment.id}`);
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
                console.log('Created new comment');
              }
            }
            
            // Exit with error if scan failed
            if (responseData.status === 'failing') {
              throw new Error('Vulnerability scan failed!');
            }
          } catch (error) {
            console.error('Error in security scan:', error);
            throw error;
          }
